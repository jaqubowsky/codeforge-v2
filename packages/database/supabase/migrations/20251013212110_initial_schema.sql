-- ====================================================================
-- Production-Ready Schema for Job Scraper Application
-- Version: 1.0
-- Description: This script sets up a robust schema for storing job offers,
-- including a logging table for scraper runs, a normalized table for
-- technologies, and appropriate indexes for performance.
-- ====================================================================

BEGIN;

-- ====================================================================
-- SECTION 1: Drop existing types to make the script re-runnable
-- ====================================================================
DROP TYPE IF EXISTS public.run_status_enum CASCADE;
DROP TYPE IF EXISTS public.workplace_type_enum CASCADE;
DROP TYPE IF EXISTS public.working_time_enum CASCADE;
DROP TYPE IF EXISTS public.experience_level_enum CASCADE;
DROP TYPE IF EXISTS public.employment_type_enum CASCADE;
DROP TYPE IF EXISTS public.salary_period_enum CASCADE;
DROP TYPE IF EXISTS public.skill_level_enum CASCADE;


-- ====================================================================
-- SECTION 2: Define ENUM Types for Data Consistency
-- ====================================================================
CREATE TYPE public.run_status_enum AS ENUM ('running', 'completed', 'failed');
CREATE TYPE public.workplace_type_enum AS ENUM ('remote', 'hybrid', 'office');
CREATE TYPE public.working_time_enum AS ENUM ('full_time', 'part_time', 'b2b', 'freelance');
CREATE TYPE public.experience_level_enum AS ENUM ('junior', 'mid', 'senior');
CREATE TYPE public.employment_type_enum AS ENUM ('permanent', 'b2b', 'mandate_contract');
CREATE TYPE public.salary_period_enum AS ENUM ('day', 'month', 'hour', 'year');
CREATE TYPE public.skill_level_enum AS ENUM ('required', 'nice_to_have');


-- ====================================================================
-- SECTION 3: Create Core Tables
-- ====================================================================

-- Table for logging every scraper execution
CREATE TABLE public.scraping_runs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    started_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    finished_at TIMESTAMPTZ,
    status public.run_status_enum NOT NULL DEFAULT 'running',
    offers_found_count INT DEFAULT 0,
    error_message TEXT
);

COMMENT ON TABLE public.scraping_runs IS 'Provides an audit log for every execution of the scraper, crucial for monitoring and debugging.';


-- Master table for all unique skills/technologies
CREATE TABLE public.technologies (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL
);

COMMENT ON TABLE public.technologies IS 'The master list of all unique skills/technologies. Acts as a single source of truth.';


-- Main table for storing job offer details
CREATE TABLE public.offers (
    -- Surrogate Key: A simple, numeric primary key for performance.
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    -- Natural Key: The offer URL, which must be unique to prevent duplicates.
    offer_url TEXT NOT NULL UNIQUE,

    -- Foreign key to link this offer back to its scrape run for data lineage.
    scraping_run_id BIGINT REFERENCES public.scraping_runs(id) ON DELETE SET NULL,

    -- Core Offer Details
    slug TEXT,
    title TEXT NOT NULL,
    company_name TEXT,
    company_logo_thumb_url TEXT,
    application_url TEXT,

    -- Job Specifics
    workplace_type public.workplace_type_enum,
    working_time public.working_time_enum,
    experience_level public.experience_level_enum,
    city TEXT,
    street TEXT,

    -- Salary Information
    employment_type public.employment_type_enum,
    salary_from NUMERIC,
    salary_to NUMERIC,
    salary_currency VARCHAR(3),
    salary_period public.salary_period_enum,

    -- Semi-structured Data
    languages JSONB,

    -- Timestamps
    published_at TIMESTAMPTZ,
    last_published_at TIMESTAMPTZ,
    expired_at TIMESTAMPTZ
);

COMMENT ON TABLE public.offers IS 'Stores core details for each unique job offer.';
COMMENT ON COLUMN public.offers.id IS 'The surrogate primary key for fast joins.';
COMMENT ON COLUMN public.offers.offer_url IS 'The unique source URL of the job posting (natural key).';
COMMENT ON COLUMN public.offers.scraping_run_id IS 'Links the offer to the specific scraper run that found or updated it.';


-- Bridge table to link offers and technologies in a many-to-many relationship
CREATE TABLE public.offer_technologies (
    offer_id BIGINT NOT NULL REFERENCES public.offers(id) ON DELETE CASCADE,
    technology_id BIGINT NOT NULL REFERENCES public.technologies(id) ON DELETE CASCADE,
    skill_level public.skill_level_enum NOT NULL,
    PRIMARY KEY (offer_id, technology_id)
);

COMMENT ON TABLE public.offer_technologies IS 'Links offers to technologies using their numeric IDs, specifying if a skill is required or nice-to-have.';


-- ====================================================================
-- SECTION 4: Create Indexes for Query Performance
-- ====================================================================

-- Case-insensitive unique index for technology names
CREATE UNIQUE INDEX technologies_name_case_insensitive_idx ON public.technologies (LOWER(name));

-- Indexes for frequently filtered columns on the offers table
CREATE INDEX idx_offers_experience_level ON public.offers (experience_level);
CREATE INDEX idx_offers_workplace_type ON public.offers (workplace_type);
CREATE INDEX idx_offers_city ON public.offers (city);
CREATE INDEX idx_offers_published_at ON public.offers (published_at DESC);
CREATE INDEX idx_offers_scraping_run_id ON public.offers (scraping_run_id);

-- Indexes on foreign keys in the bridge table are crucial for fast JOINs
CREATE INDEX idx_offer_technologies_offer_id ON public.offer_technologies (offer_id);
CREATE INDEX idx_offer_technologies_technology_id ON public.offer_technologies (technology_id);

COMMIT;
