create type "public"."run_status" as enum ('pending', 'running', 'completed', 'failed');

create type "public"."run_type" as enum ('offer_collection', 'technology_counts');

create table "public"."offers" (
    "id" bigint generated by default as identity not null,
    "scraping_run_id" bigint not null,
    "title" text not null,
    "company" text,
    "salary" text,
    "offer_url" text not null,
    "description" text,
    "skills" jsonb,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."offers" enable row level security;

create table "public"."scraping_runs" (
    "id" bigint generated by default as identity not null,
    "run_at" timestamp with time zone not null default now(),
    "status" run_status not null default 'pending'::run_status,
    "offer_count" integer not null default 0,
    "source_url" text,
    "run_type" run_type not null,
    "search_keyword" text
);


alter table "public"."scraping_runs" enable row level security;

create table "public"."technology_counts" (
    "id" bigint generated by default as identity not null,
    "scraping_run_id" bigint not null,
    "name" text not null,
    "count" integer not null default 0,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."technology_counts" enable row level security;

CREATE INDEX idx_offers_scraping_run_id ON public.offers USING btree (scraping_run_id);

CREATE INDEX idx_offers_skills_gin ON public.offers USING gin (skills);

CREATE INDEX idx_scraping_runs_run_type ON public.scraping_runs USING btree (run_type);

CREATE INDEX idx_technology_counts_scraping_run_id ON public.technology_counts USING btree (scraping_run_id);

CREATE UNIQUE INDEX offers_offer_url_key ON public.offers USING btree (offer_url);

CREATE UNIQUE INDEX offers_pkey ON public.offers USING btree (id);

CREATE UNIQUE INDEX scraping_runs_pkey ON public.scraping_runs USING btree (id);

CREATE UNIQUE INDEX technology_counts_pkey ON public.technology_counts USING btree (id);

CREATE UNIQUE INDEX unique_tech_per_run ON public.technology_counts USING btree (scraping_run_id, name);

alter table "public"."offers" add constraint "offers_pkey" PRIMARY KEY using index "offers_pkey";

alter table "public"."scraping_runs" add constraint "scraping_runs_pkey" PRIMARY KEY using index "scraping_runs_pkey";

alter table "public"."technology_counts" add constraint "technology_counts_pkey" PRIMARY KEY using index "technology_counts_pkey";

alter table "public"."offers" add constraint "offers_offer_url_key" UNIQUE using index "offers_offer_url_key";

alter table "public"."offers" add constraint "offers_scraping_run_id_fkey" FOREIGN KEY (scraping_run_id) REFERENCES scraping_runs(id) ON DELETE CASCADE not valid;

alter table "public"."offers" validate constraint "offers_scraping_run_id_fkey";

alter table "public"."scraping_runs" add constraint "offer_count_non_negative" CHECK ((offer_count >= 0)) not valid;

alter table "public"."scraping_runs" validate constraint "offer_count_non_negative";

alter table "public"."technology_counts" add constraint "count_non_negative" CHECK ((count >= 0)) not valid;

alter table "public"."technology_counts" validate constraint "count_non_negative";

alter table "public"."technology_counts" add constraint "technology_counts_scraping_run_id_fkey" FOREIGN KEY (scraping_run_id) REFERENCES scraping_runs(id) ON DELETE CASCADE not valid;

alter table "public"."technology_counts" validate constraint "technology_counts_scraping_run_id_fkey";

alter table "public"."technology_counts" add constraint "unique_tech_per_run" UNIQUE using index "unique_tech_per_run";

grant delete on table "public"."offers" to "anon";

grant insert on table "public"."offers" to "anon";

grant references on table "public"."offers" to "anon";

grant select on table "public"."offers" to "anon";

grant trigger on table "public"."offers" to "anon";

grant truncate on table "public"."offers" to "anon";

grant update on table "public"."offers" to "anon";

grant delete on table "public"."offers" to "authenticated";

grant insert on table "public"."offers" to "authenticated";

grant references on table "public"."offers" to "authenticated";

grant select on table "public"."offers" to "authenticated";

grant trigger on table "public"."offers" to "authenticated";

grant truncate on table "public"."offers" to "authenticated";

grant update on table "public"."offers" to "authenticated";

grant delete on table "public"."offers" to "service_role";

grant insert on table "public"."offers" to "service_role";

grant references on table "public"."offers" to "service_role";

grant select on table "public"."offers" to "service_role";

grant trigger on table "public"."offers" to "service_role";

grant truncate on table "public"."offers" to "service_role";

grant update on table "public"."offers" to "service_role";

grant delete on table "public"."scraping_runs" to "anon";

grant insert on table "public"."scraping_runs" to "anon";

grant references on table "public"."scraping_runs" to "anon";

grant select on table "public"."scraping_runs" to "anon";

grant trigger on table "public"."scraping_runs" to "anon";

grant truncate on table "public"."scraping_runs" to "anon";

grant update on table "public"."scraping_runs" to "anon";

grant delete on table "public"."scraping_runs" to "authenticated";

grant insert on table "public"."scraping_runs" to "authenticated";

grant references on table "public"."scraping_runs" to "authenticated";

grant select on table "public"."scraping_runs" to "authenticated";

grant trigger on table "public"."scraping_runs" to "authenticated";

grant truncate on table "public"."scraping_runs" to "authenticated";

grant update on table "public"."scraping_runs" to "authenticated";

grant delete on table "public"."scraping_runs" to "service_role";

grant insert on table "public"."scraping_runs" to "service_role";

grant references on table "public"."scraping_runs" to "service_role";

grant select on table "public"."scraping_runs" to "service_role";

grant trigger on table "public"."scraping_runs" to "service_role";

grant truncate on table "public"."scraping_runs" to "service_role";

grant update on table "public"."scraping_runs" to "service_role";

grant delete on table "public"."technology_counts" to "anon";

grant insert on table "public"."technology_counts" to "anon";

grant references on table "public"."technology_counts" to "anon";

grant select on table "public"."technology_counts" to "anon";

grant trigger on table "public"."technology_counts" to "anon";

grant truncate on table "public"."technology_counts" to "anon";

grant update on table "public"."technology_counts" to "anon";

grant delete on table "public"."technology_counts" to "authenticated";

grant insert on table "public"."technology_counts" to "authenticated";

grant references on table "public"."technology_counts" to "authenticated";

grant select on table "public"."technology_counts" to "authenticated";

grant trigger on table "public"."technology_counts" to "authenticated";

grant truncate on table "public"."technology_counts" to "authenticated";

grant update on table "public"."technology_counts" to "authenticated";

grant delete on table "public"."technology_counts" to "service_role";

grant insert on table "public"."technology_counts" to "service_role";

grant references on table "public"."technology_counts" to "service_role";

grant select on table "public"."technology_counts" to "service_role";

grant trigger on table "public"."technology_counts" to "service_role";

grant truncate on table "public"."technology_counts" to "service_role";

grant update on table "public"."technology_counts" to "service_role";

create policy "Allow public read-only access"
on "public"."offers"
as permissive
for select
to public
using (true);


create policy "Allow public read-only access"
on "public"."scraping_runs"
as permissive
for select
to public
using (true);


create policy "Allow public read-only access"
on "public"."technology_counts"
as permissive
for select
to public
using (true);



